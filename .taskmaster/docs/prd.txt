Product: Raycast Zendesk Extension

Goal
- Build a Raycast extension to work with Zendesk tickets and Help Center articles quickly from the keyboard.

Key Outcomes
- View/search tickets (mine, group, org) and open in Zendesk.
- Reply to tickets (public/private) with quick compose.
- Change ticket status (open, pending, on-hold, solved), assign to me.
- Browse/search Help Center articles, copy/open URLs.
- Minimal, fast UX with keyboard-first shortcuts.

Users
- Zendesk support agents and leads who use Raycast.

Scope
- Commands: Tickets, Ticket Details + Reply, Articles
- Auth: API Token (email + token) via Basic Auth. Preferences for subdomain, email, apiToken.
- Rate limit handling, error toasts.
- No realtime push; refresh on demand.

Functional Requirements
- Tickets list: default query `type:ticket assignee:me status<solved` with freeform search bar.
- Ticket item shows subject, status tag, last updated.
- Actions: Open in browser, Reply…, Assign to me, Change Status → submenu.
- Reply view: public/private toggle, submit.
- Articles: search Help Center articles, show title + updated date, actions to open/copy URL.

Non-Functional
- TypeScript + React (Raycast SDK).
- Small `zendesk.ts` client with shared auth + fetch wrapper.
- Tests for helper functions (query construction, error handling).
- Docs in README, icons.

Risks/Constraints
- Zendesk API limits (HTTP 429) → backoff on `Retry-After`.
- Permissions required for tickets updates.

Deliverables
- Working Raycast extension with `tickets` and `articles` commands.
- Preferences: subdomain, email, apiToken.
- README with setup and screenshots.
